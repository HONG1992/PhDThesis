




%%begin.rcode settings, echo = FALSE, cache = FALSE, message = FALSE, results = 'hide', eval = TRUE

# There are figures created in the data analysis which are not in the final chapter document.
#   If TRUE, they will be included in the output.
#   Use 'hide' to remove them.
extraFigs <- 'hide'

#knitr options
#  Set figure prefix as A so that no figures will be overwritten.
opts_chunk$set(cache.path = '.AppCh3Cache/', fig.path = 'figure/A-')
source('misc/KnitrOptions.R')

# ggplot2 theme.
source('misc/theme_tcdl.R')
theme_set(theme_grey() + theme_tcdl)


# Choose the number of cores to use
nCores <- 4

%%end.rcode


%%begin.rcode libs, cache = FALSE, result = FALSE

# Data handling
library(dplyr)
library(broom)
library(readxl)
library(sqldf)
library(reshape2)

# phylogenetic regression
library(ape)
library(caper)
library(phytools)
library(nlme)
library(qpcR)
library(car)

# weighted means + var
library(Hmisc)

# Plotting
library(ggplot2)
library(ggtree)
library(palettetown)
library(ggthemes)
library(GGally)
library(cowplot)

# tables



# For synonym list
library(taxize)

# Spatial analysis
library(maptools)
library(geosphere)

# Parllel computation
library(parallel)

%%end.rcode


%%-------------------------------------------------------------------------------%%
%% Give full data tables for both analyses.
%%-------------------------------------------------------------------------------%%




%%begin.rcode readRawData



fstFinal <- read.csv('data/Chapter3/fstFinal.csv', row.names = 1)

nSpecies <- read.csv('data/Chapter3/nSpecies.csv', row.names = 1)

%%end.rcode


%%begin.rcode rawDataTidy

# Join the data frames
joindf <- nSpecies %>%
            full_join(fstFinal)
            
# Hack a  variable to sort so that it's FST only, both, subspecies only.
joindf$whichAnalyses <- as.numeric(is.na(joindf$NumberOfSubspecies))
joindf$whichAnalyses[!is.na(joindf$NumberOfSubspecies) & !is.na(joindf$Nm)] <- 2
joindf$whichAnalyses[joindf$whichAnalyses == 0] <- 3

# Make references cite
joindf$References <- as.character(joindf$References)
joindf$References[!is.na(joindf$References)] <- paste0('\\cite{', joindf$References[!is.na(joindf$References)], '}')

# Sort and select wanted column
#   Have to do loads of converting to characters and sprintf because of units row below.
joindf <- joindf %>%
            mutate(binomial = paste0('\\emph{', binomial, '}')) %>%
            mutate(distrSize = sprintf('%.2f', distrSize / 1e9)) %>%
            mutate(Nm = sprintf('%.2f', Nm)) %>%
            mutate(Nm = replace(Nm, Nm == 'NA', '')) %>%
            mutate(rangeWidth = sprintf('%.2f', rangeWidth)) %>%
            mutate(rangeWidth = replace(rangeWidth, rangeWidth == 'NA', '')) %>%
            arrange(whichAnalyses, Family, binomial) %>%
            dplyr::select(Family, binomial, virusSpecies, NumberOfSubspecies, Nm, mass, 
                   distrSize, scholarRefs, pubmedRefs, rangeWidth, Dmax..km., References)

# All a horrible hack now. 
#   Add end head to end...
joindf <- joindf %>%  
            rbind(c('', '', '', '', '', '(g)', '($\\times 10^{9}$km$^2$)', '', '', '(km)', '(km)', ''), .)

names(joindf) <- c('Family', 'Binomial', 'Virus Sp.', 'Subsp.', 'Gene Flow', 'Mass', 
                   'Range Size', 'Scholar', 'PubMed', 'Range Length', 'Dmax', 'Reference')



%%end.rcode


\begin{landscape}

%%begin.rcode rawDataTable, results = 'asis', cache = FALSE
rawDataCapt <- '
Raw data for both analyses.
Range Length is the distance between furthest apart points in the species range.
Dmax is the distance between furthest apart $F_{ST}$ sampling locations.
The references are for the $F_{ST}$ data only.
'
rawDataTitle <- '
Raw data for both analyses.
'


addtorow          <- list()
addtorow$pos      <- list()
addtorow$pos[[1]] <- c(1)
addtorow$command  <- c(paste("\\midrule\n",
                             "\\endfirsthead \n",
                             "\\caption[]{", rawDataCapt, "}\\\\\n",
                             "\\toprule\n",
"Family & Binomial & Virus Sp. & Subsp. & Gene Flow & Mass & Range Size & Scholar & PubMed & Range Length & Dmax & Reference \\\\\n ",
"  &  &  &  &  & (g) & ($\\times 10^{9}$km$^2$) &  &  & (km) & (km) &  \\\\\n ",
                             "\\midrule \n",
                             "\\endhead \n", sep=""))



print(xtable(joindf, 
             digits = 2, 
             caption = c(rawDataCapt, rawDataTitle), 
             label = "A-rawData",
             align = c('l', '@{}l', 'l', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'l@{}')), 
      size = "tiny", #Change size; useful for bigger tables
      include.rownames = FALSE, #Don't print rownames
      include.colnames = TRUE,
      tabular.environment = 'longtable',
      sanitize.colnames.function = function(x){x},
      sanitize.text.function = function(x){x},
      caption.placement = "top", 
      hline.after = c(-1, nrow(joindf)), 
      booktabs = TRUE,
      add.to.row = addtorow,
      floating = FALSE
    )


%%end.rcode
\end{landscape}











%%-------------------------------------------------------------------------------%%
%% Some plots of the data
%%-------------------------------------------------------------------------------%%








%%begin.rcode treeRead

# Read in trees
t <- read.nexus('data/Chapter3/fritz2009geographical.tre')

# Select best supported tree
tr1 <- t[[1]]

# Make names match previous names
tr1$tip.label <- gsub('_', ' ', tr1$tip.label)

# Which tips are not needed
unneededTips <- tr1$tip.label[!(tr1$tip.label %in% nSpecies$binomial)]

# Prune tree down to only needed tips.
pruneTree <- drop.tip(tr1, unneededTips)

rm(t)


%%end.rcode

%%begin.rcode scholarVsPubmed

# Check how correlated pubmed and scholar are.  

# Check how correlated pubmed and scholar are.  


compSubspecies <- comparative.data(data = nSpecies, phy = pruneTree, names.col = 'binomial')

citeCor <- pgls(log(scholarRefs, base = 10) ~ log(pubmedRefs + 1, base = 10), data = compSubspecies, lambda = 'ML')


citeCor2 <- summary(pgls(log(scholarRefs) ~ log(pubmedRefs + 1), data = compSubspecies, lambda = 'ML'))



%%end.rcode

%%begin.rcode scholarvspubmedCapt


refsCapt <- paste0("
  Logged number of references on Scholar and PubMed, with a fitted phylogenetic linear model. 
  Colours indicate family. 
  (pgls: $t$ = ",
  round(citeCor2$coefficients['log(pubmedRefs + 1)', 't value'], 2), 
  ", df = ",
  citeCor2$df[2], 
  ", $p < 10^{-5}$.)")

%%end.rcode

%%begin.rcode scholarvspubmedPlot, fig.show = TRUE, fig.height = 3.5, out.width = '\\textwidth', fig.cap = refsCapt

pp <- c(pokepal('oddish')[c(1,3,5,7,9,10)], pokepal('Carvanha')[c(2, 4, 13, 12, 9, 1)])

studyEffortCor <- summary(citeCor)
# And plot
ggplot(nSpecies, aes(y = scholarRefs, x = pubmedRefs + 1)) +
  geom_point(aes(colour = familyPlotCol), size = 2.5) +
  scale_x_log10() +
  scale_y_log10() +
  labs(y = 'Scholar Refs', x = 'PubMed Refs', colour = 'Family') + 
  scale_colour_manual(values = pp[c(2, 5, 6, 7, 9, 10, 11)]) +
  geom_abline(intercept = coef(citeCor)[1], slope = coef(citeCor)[2], size = 1)

%%end.rcode

%%begin.rcode subsDataCapts
subsDataCapts <- c(
'Unlogged number of virus species against log mass with a non-phylogenetic linear model added. Points are significantly jittered to try and reveal the severe overplotting in the bottom left corner in particular.',
'Number of virus species against logged number of subspecies (not marginal) with a non-phylogenetic linear model added. Points are significantly jittered to try and reveal the severe overplotting in the bottom left corner in particular.', 
'Number of virus species against logged number of subspecies (not marginal) with a non-phylogenetic linear model added.', 
'Virus species against study effort (log pubmed references +1)')
%%end.rcode

%%begin.rcode subsDataviz, fig.show = extraFigs, fig.cap = subsDataCapts

# A number of exploratory plots

# Mass against viruses
ggplot(nSpecies, aes(log(mass), virusSpecies)) +
  geom_point(aes(colour = familyPlotCol), size = 2.5) + 
  geom_smooth(method = 'lm')+
  labs(colour = 'Family') +
  scale_colour_hc()



# N Subspecies and against viruses
ggplot(nSpecies, aes(NumberOfSubspecies, virusSpecies)) +
  geom_jitter(aes(colour = familyPlotCol), size = 2.5, 
    position = position_jitter(width = .3, height = .3)) + 
  geom_smooth(method = 'lm')+
  labs(colour = 'Family') +
  scale_colour_hc()


# Log(N Subspecies) and against viruses

ggplot(nSpecies, aes(NumberOfSubspecies, virusSpecies)) +
  geom_jitter(aes(colour = familyPlotCol), size = 2.5, 
    position = position_jitter(width = .05, height = .2)) +
  scale_x_log10() + 
  geom_smooth(method = 'lm')+
  labs(colour = 'Family') +
  scale_colour_hc()


# N. Subspecies against viruses as a boxplot to deal with overplotting.
ggplot(nSpecies, aes(SubspeciesFactor, virusSpecies)) +
  geom_boxplot() +
  scale_x_discrete(limits = levels(nSpecies$SubspeciesFactor), drop=FALSE) +
  geom_smooth(method = 'lm', aes(group = 1)) +
  xlab('# subspecies')


# Study effort against virusSpecies
ggplot(nSpecies, aes(log(pubmedRefs + 1), virusSpecies)) +
  geom_jitter(aes(colour = familyPlotCol), size = 2.5, 
    position = position_jitter(width = .1, height = .1)) + 
  geom_smooth(method = 'lm') +
  labs(colour = 'Family')+
  scale_colour_hc()


# Distribution size aginst virus


ggplot(nSpecies, aes(distrSize, virusSpecies)) +
  geom_point(aes(colour = familyPlotCol), size = 2.5) + 
  geom_smooth(method = 'lm') +
  labs(colour = 'Family') +
  scale_colour_hc() +
  scale_x_log10()


# Correlation plot
nSpecies %>%
  dplyr::select(virusSpecies, NumberOfSubspecies, mass, distrSize, pubmedRefs, scholarRefs) %>%
  mutate(mass = log(mass), distrSize = log(distrSize), pubmedRefs = log(pubmedRefs + 1), scholarRefs = log(scholarRefs)) %>%
  ggpairs(.)

%%end.rcode











%%-------------------------------------------------------------------------------%%
%% Read full model selection results for both analyses and make tables.
%%-------------------------------------------------------------------------------%%




%%begin.rcode analyseModelSelect, fig.show = extraFigs

allResults <- read.csv('data/Chapter3/modelSelectSubspecies.csv', row.names = 1)

modelWeights <- allResults %>%
                  group_by(predictors) %>%
                  summarise(AICc = mean(AIC)) %>%
                  mutate(dAIC = AICc - min(AICc), modelWeight = exp(- 0.5 * dAIC) / sum(exp(- 0.5 * dAIC))) %>%
                  arrange(desc(modelWeight)) %>%
                  mutate(cumulativeWeight = cumsum(modelWeight)) %>%
                  mutate(predictors = gsub(':', '*', predictors)) %>%
                  mutate(predictors = gsub('scholarRefs', 'log(Scholar)', predictors)) %>%
                  mutate(predictors = gsub('mass', 'log(Mass)', predictors)) %>%
                  mutate(predictors = gsub('distrSize', 'log(RangeSize)', predictors)) %>%
                  mutate(predictors = gsub('1', 'Intercept only', predictors)) %>%
                  mutate(predictors = gsub('NumberOfSubspecies', 'NSubspecies', predictors))

colnames(modelWeights) <- c("Model", "$\\bar{\\text{AICc}}$", "$\\Delta$AICc", "$w$", "$\\sum w$") 

%%end.rcode



%%begin.rcode fstAnalyseModelSelect, fig.show = extraFigs


fstAllResults <- read.csv('data/Chapter3/fstModelSelectSubspecies.csv', row.names = 1)


fstModelWeights <- fstAllResults %>%
                  group_by(predictors) %>%
                  summarise(AICc = mean(AIC)) %>%
                  mutate(dAIC = AICc - min(AICc), modelWeight = exp(- 0.5 * dAIC) / sum(exp(- 0.5 * dAIC))) %>%
                  arrange(desc(modelWeight)) %>%
                  mutate(cumulativeWeight = cumsum(modelWeight)) %>%
                  mutate(predictors = gsub(':', '*', predictors)) %>%
                  mutate(predictors = gsub('scholarRefs', 'log(Scholar)', predictors)) %>%
                  mutate(predictors = gsub('mass', 'log(Mass)', predictors)) %>%
                  mutate(predictors = gsub('distrSize', 'log(RangeSize)', predictors)) %>%
                  mutate(predictors = gsub('1', 'Intercept only', predictors)) %>%
                  mutate(predictors = gsub('Nm', 'Gene Flow', predictors))

colnames(fstModelWeights) <- c("Model", "$\\bar{\\text{AICc}}$", "$\\Delta$AICc", "$w$", "$\\sum w$") 


%%end.rcode




%%begin.rcode printnspeciestable, results = 'asis'

modelSelectCapt <- "
  Model selection results for number of subspecies analysis. 
  $\\bar{\\text{AICc}}$ is the mean AICc score across \rinline{nBoots} resamplings of the null random variable. 
  $\\Delta$AICc is the model's $\\bar{\\text{AICc}}$ score minus $\\text{min}(\\bar{\\text{AICc}})$. 
  $w$ is the Akaike weight and can be interpreted as the probability that the model is the best model (of those in the plausible set).
  $\\sum w$ is the cumulative sum of the Akaike weights.
  log(Scholar)*NSubspecies implies the interaction term between study effort and number of subspecies.
  "

modelSelectTitle <- "
  Full model selection results for number of subspecies analysis. 
"

# floating.environment = 'sidewaystable') ? possible to do upright caption.
print(xtable(modelWeights, 
             digits = 2, 
             caption = c(modelSelectCapt, modelSelectTitle), 
             label = "A-modelWeights",
             align = c('l', '@{}l', 'r', 'r', 'r', 'r@{}')), 
      size = "tiny", #Change size; useful for bigger tables
      include.rownames = FALSE, #Don't print rownames
      include.colnames = TRUE,

      sanitize.colnames.function = function(x){x},
      caption.placement = "top", 
      hline.after = c(-1, 0, nrow(modelWeights)), 
      booktabs = TRUE
    )




%%end.rcode



%%begin.rcode printfsttable, results = 'asis'

fstSelectCapt <- "
  Model selection results for number of effective gene flow analysis. 
  $\\bar{\\text{AICc}}$ is the mean AICc score across \rinline{nBoots} resamplings of the null random variable. 
  $\\Delta$AICc is the model's $\\bar{\\text{AICc}}$ score minus $\\text{min}(\\bar{\\text{AICc}})$. 
  $w$ is the Akaike weight and can be interpreted as the probability that the model is the best model (of those in the plausible set).
  $\\sum w$ is the cumulative sum of the Akaike weights.
  "

fstSelectTitle <- "
  Full model selection results for number of effective gene flow analysis. 
"

print(xtable(fstModelWeights, 
             digits = 2, 
             caption = c(fstSelectCapt, fstSelectTitle),
             label = "A-fstModelWeights",
             align = c('l', '@{}l', 'r', 'r', 'r', 'r@{}')),  
      size = "scriptsize", #Change size; useful for bigger tables
      include.rownames = FALSE, #Don't print rownames
      include.colnames = TRUE,
      sanitize.colnames.function = function(x){x},
      caption.placement = "top", 
      hline.after = c(-1, 0, nrow(fstModelWeights)), 
      booktabs = TRUE
    )


%%end.rcode







%%-------------------------------------------------------------------------------%%
%% Read and plot bat clocks rocks tree.
%%-------------------------------------------------------------------------------%%


%%begin.rcode treeRead2

# Read in trees
t2 <- read.nexus('data/Chapter3/BatST2BL.nex')

# Make names match previous names
t2$tip.label <- gsub('_', ' ', t2$tip.label)

#missing <- nSpecies$binomial[!nSpecies$binomial %in% pruneTree2$tip.label ]

## Copy binomial column. binomial will be changed to fit t2.
#nSpecies$oldBinomial <- nSpecies$binomial

## Replace with agrep where possible
#closeMatch <- sapply(missing, function(i) t2$tip.label[agrep(i, t2$tip.label, max.distance = 0.11)])

#closeMatch <- closeMatch[sapply(closeMatch, function(i) length(i) > 0)]




unneededTips2 <- t2$tip.label[!(t2$tip.label %in% nSpecies$binomial)]

# Prune tree down to only needed tips.
pruneTree2 <- drop.tip(t2, unneededTips2)


nSpecies2 <- sapply(pruneTree2$tip.label, function(x) which(nSpecies$binomial == x)) %>%
               nSpecies[., ]


################
## Fst tree   ##
################


# Which tips are not needed
fstUnneededTips2 <- t2$tip.label[!(t2$tip.label %in% fstFinal$binomial)]

# Prune tree down to only needed tips.
fstTree2 <- drop.tip(t2, fstUnneededTips2)

# Which tips in Fst analysis are not in bats clocks tree.
fstFinal$binomial[!(fstFinal$binomial %in% fstTree2$tip.label)]


# Hacky cruddy way of placing the missing tips into the tree. Should end up with genus level polytomies in trimmed tree.
# Just replacing some of the uneeded tips with the ones I need.

t2$tip.label[t2$tip.label == 'Miniopterus pusillus'] <- 'Miniopterus natalensis'
t2$tip.label[t2$tip.label == 'Miniopterus schreibersi'] <- 'Miniopterus schreibersii'
t2$tip.label[t2$tip.label == 'Rousettus celebensis'] <- 'Rousettus leschenaultii'
t2$tip.label[t2$tip.label == 'Myotis oxyotus'] <- 'Myotis macropus'
t2$tip.label[t2$tip.label == 'Myotis leibii'] <- 'Myotis ciliolabrum'

#Re prune tree
# Which tips are not needed
fstUnneededTips2 <- t2$tip.label[!(t2$tip.label %in% fstFinal$binomial)]

# Prune tree down to only needed tips.
fstTree2 <- drop.tip(t2, fstUnneededTips2)

# Check we now have all the tips.
fstFinal$binomial[!(fstFinal$binomial %in% fstTree2$tip.label)]

rm(t2)




%%end.rcode



%%begin.rcode treeCapt

treeCapt <- '
Phylogeny from \\textcite{jones2005bats} (version 2) pruned to include all species used in the number of subspecies analysis.
Dot size shows the number of known viruses for that species and colour shows family.
Analyses run with this phylogeny gave qualitatively similar results to analyses using the phylogeny from \\cite{bininda2007delayed}.
'

treeTitle <- 'Pruned alternative phylogeny with dot size showing number of pathogens and colour showing family.'

%%end.rcode


%%begin.rcode treePlot2, out.width = '1\\textwidth', out.extra = 'trim = 0cm 0cm 0cm 0cm', fig.height = 5, fig.height = 5.5, fig.cap = treeCapt, fig.scap = treeTitle

# Plot tree 
p <- ggtree(pruneTree2, layout = 'fan') 

p %<+% nSpecies +
  geom_point2(aes(size = virusSpecies, colour = Family, subset = isTip)) +
  scale_size(range = c(0.1, 3)) +
  scale_colour_manual(values = c(pokepal('oddish')[c(1,3,5,7,9,10)],    pokepal('Carvanha')[c(2,4, 13, 12, 9, 1)])) +
  theme_tcdl +
  theme(plot.margin = unit(c(-2, -0, +3, -0), "lines")) +
  theme(legend.position = c(0.5, -0.04)) +
  labs(size = 'Virus Richness') +
  theme(legend.key.size = unit(0.8, "lines"),
        legend.text = element_text(size = 10),
        legend.margin = unit(c(0.05), "cm"),
        legend.title = element_text(size = 12),
        legend.direction = "horizontal") +
  guides(colour = guide_legend(ncol=3))



%%end.rcode






%%-----------------------------------------------------------------------------%%
Interactive plots
%%-----------------------------------------------------------------------------%%






%%begin.rcode fstInteractive, eval = FALSE		
 		
 pp < ggplot(fstFinal, aes(x = Nm, y = virusSpecies, colour = Marker, text = binomial)) +		
   geom_point(size = 2) +		
   scale_colour_poke(pokemon = 'oddish', spread = 3) +		
   scale_x_log10() +		
   geom_abline(intercept = nmFstUni$coef[1, 1], slope = nmFstUni$coef[2, 1], lwd = 0.7, colour = pokepal('nidorina')[10]) +		
   xlab('Gene Flow (per gen.)') +		
   ylab('Viral Richness') 		
 		
 ply <- ggplotly(pp, tooltip = c('text', 'colour', 'y'))		
 htmlwidgets::saveWidget(as.widget(ply), "imgs/fstinter.html")		
 		
 %%end.rcode		
 		





%%begin.rcode ggtreeInteractive, eval = FALSE

 #ply <- ggplotly(p)		
 # ply <- ggplotly(pp, tooltip = c('text', 'colour', 'y'))		
 #htmlwidgets::saveWidget(as.widget(ply), "imgs/fstinter.html")		

%%end.rcode

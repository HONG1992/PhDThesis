




%%begin.rcode settings, echo = FALSE, cache = FALSE, message = FALSE, results = 'hide'

####################################
### Important simulation options ###
####################################

# Compilation options
# Run simulations? This will take many hours
runAllSims <- FALSE

# Save raw simulation output
# This will take ~10GB or so.
# If false, summary statistics of each simulation are saved instead.
saveData <- FALSE

# Display extra figures in final documents?
extraFigs <- 'hide'


# How many cores do you want to use to run simulations?
nCores <- 7

##########################
### End options        ###
##########################


opts_chunk$set(cache.path = '.Ch4Cache/')

source('misc/theme_tcdl.R')
source('misc/KnitrOptions.R')
theme_set(theme_grey() + theme_tcdl)



%%end.rcode


%%begin.rcode libs, cache = FALSE, result = FALSE

# My package. For running and analysing Epidemiological sims.
#   https://github.com/timcdlucas/metapopepi
library(MetapopEpi)

# Data manipulations
library(reshape2)
library(dplyr)

# Calc confidence intervals (could probably do with broom instead now.)
library(binom)

# To tidy up stats models/tests
library(broom)


# Run simulations in parallel
library(parallel)


# plotting
library(ggplot2)
library(palettetown)
# Get nice fonts in base graphics
library(showtext)



%%end.rcode


\section{Abstract}


\tmpsection{One or two sentences providing a basic introduction to the field}
% comprehensible to a scientist in any discipline.
\lettr{A}n increasingly large fraction of emerging diseases come from animals \cite{jones2008global, taylor2001risk} and these diseases have a huge impact on human health.
The chance that a new disease will come from any particularly wild host species increases with the diversity of pathogens in that species.
However, the factors that control pathogen diversity in wild populations are still unknown.



\tmpsection{Two to three sentences of more detailed background}
Population density is known to increase pathogen richness while theory suggests that population structure may also play a role.
However, these factors, along with population abundance, are intrinsically linked; reducing density reduces contacts between individuals.
In group living species, this is particularly true, with group size and the number of groups and distribution size contributing to total animal density. 
As these factors are completely interdependant, it is very difficult to study them empirically e.g. in a comparative frame work.

\tmpsection{One sentence clearly stating the general problem (the gap)}
% being addressed by this particular study.

It is unknown whether it is specifically density that controls pathogen diversity or whether density merely correlates with population structure, group size or population size (abundance).


\tmpsection{One sentence summarising the main result}
%  (with the words “here we show” or their equivalent).
Here I use metapopulation SIR models to test whether it is density \emph{per se} that increases the ability of a new pathogen to invade as apposed to colony size, population abundance or population structure.



\tmpsection{Two or three sentences explaining what the main result reveals in direct comparison to what was thought to be the case previously}
% or how the main result adds to previous knowledge



\tmpsection{One or two sentences to put the results into a more general context.}

\tmpsection{Two or three sentences to provide a broader perspective, }
% readily comprehensible to a scientist in any discipline.





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Introduction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




\tmpsection{General Intro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A basic introduction to the field,
% comprehensible to a scientist in any discipline.

Zoonotic diseases are an increasingly important source of human infectious diseases \cite{jones2008global, woolhouse2006host, taylor2001risk}.
The diversity of pathogens in wild animal populations is huge and largely unknown \cite{poulin2014parasite}.
The factors that allow large numbers of pathogen species to coexist in a host \cite{anthony2013strategy, anthony2013strategy} are still unclear.
It is likely that population level factors such as population density, range size and population structure have an important role in controlling pathogen community dynamics.
Global change is strongly peturbing wild animal populations, but without clear mechanistic models of how these populations maintain pathogen species richness, we can not predict how pathogen communities, and the risks of zoonotic outbreaks, will change in the coming decades.





\tmpsection{Specific Intro}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% more detailed background}
% comprehensible to scientists in related disciplines.

\tmpsection{Theoretical background}
Variables that describe populations, such as population density and structure, are well established as having a central role in disease dynamics \cite{colizza2007invasion, barthelemy2010fluctuation, colizza2007invasion,  wu2013threshold, may1979population, anderson1979population}.
More recently, the role of the population has been examined with respect to pathogen richness and the coexistence of competing pathogens \cite{qiu2013vector, allen2004sis, nunes2006localized}.
Yet even in theoretical studies there is confusion as to how exactly we should measure populations.
There is disagreement on whether population density (individuals per unit area) should be preferred over population abundance (number of individuals) \cite{dejong and begon?} and how exactly area should be incorporated \cite{}. 


\tmpsection{Density/abundance in comparative research}
With the increase of novel zoonotic pathogens \cite{} attention has turned to comparatively assessing the factors that are associated with high or low pathogen richness in wild animal species \cite{morand review}.
Here again there is little clarity on the relationship between a number of species measurements.
Population density is commonly studied \cite{} as is range size \cite{}.
However it is rarely if ever acknowledge that these two values are intrinsically linked by $d = N/a$ where $d$ is density, $N$ is the population size and $a$ is area.
In contrast, abundance has never been directly studied as a predictor of pathogen richness.
This is  a glaring omission as abundance more closely aligns with the ``island-biogeography'' class of mechanisms posited to explain pathogen richness \cite{}.
Furthermore, abundance is considered the more relevant measure in terms of disease dynamics, especially when area cannot be assumed to be constant \cite{begon} as is commonly the case in wild populations, especially in the face of global warming and habitat degradation.

\tmpsection{Populatiion structure in comparative research}
It is clear that individuals of an animal species are not randomly distributed in space: social groups are common \cite{} and geographic boundaries reduce contacts between isolated populations.
In social species, measures such as global population density are largely meaningless with respect to the number of infectious contacts individuals may have.
Rather, contacts are based on group size and rates of movements between groups.
Two aspects of non-random transmission have been studied in particular: group size \cite{nunn and others} and global measures of population structure including genetic measures and measures derived from distribution shapes (\textcite{gay, maganga, turmelle} and see Chapter \ref{ch:}).
Again however, the relationships between these terms and more the more global terms mentioned above are rarely examined.
Population abundance can be decomposed into two components, the number of groups and the average size of a group with $N = nm$ where $n$ is group size and $m$ is the number of groups.
The amount of movement between is largely dependant on the distance between groups.
This depends on the number of groups per area $m/a$ or $N/na$ and the average distance between groups, if groups are randomly distributed in space scales as $something$.

\tmpsection{But reaction to climate change, and predictions depend on which factor is actually important}


Importantly, these factors, although interrelated, will respond differently to global change and the response will be species dependant.
Some species may suffer large range contractions, and therefore large falls in absolute abundance, while their density remains fairly constant.
Other species might be expected to retain their distribution but have a depressed population density across their range.
Similarly with population structure, species particularly affected by habitat fragmentation can expect increased reduced movement of individuals between groups, while other species may be most affected by a reduction in group size.
Furthermore, different mechanisms of maintenance and creation of pathogen richness will respond to changes in these factors differently as well.
If pathogen richness ultimately depends on the ``island size'' of the host population, then falls in population abundance will reduce pathogen richness the most.
If local group size affects the ability of new pathogens to invade (Chapter \ref{ch:sim1}) then changes in group size are likely to be most important.
Finally, if increased population structure allows pathogens to coexist (\parencite{qiu2013vector, allen2004sis, nunes2006localized} and Chapter \ref{ch:}) increase habitat fragmentation could be expected to increase pathogen richness.

As these factors are likely to be correlated, correlative comparative studies will struggle to distinguish between them.
Furthermore, even if factors are supported or rejected, the specific mechanisms by which the promote pathogen richness will remain unknown, and these may suggest different responses to global change.
Furthermore, mechanistic models are expected to be more predictive into the future and into hitherto unseen parameter space.




\tmpsection{The gap}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Therefore there is great need to mechanistic models that try to disentangle the interplay between these many factors: density, abundance, range size, population structure, group size and the number of groups.

\tmpsection{What I did and found}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% One sentence summarising the main result
% (with the words “here we show” or their equivalent).



%%begin.rcode SimSetup

  # These apply to both topo and disp sims. And probably should apply to extinction sims if I include them.
  # How long should the simulation last?
  nEvent <- 1e6
  # When should the invading pathogen be added.
  invadeT <- 7e5

  
  # Sims per parameter set.
  each <- 100
  
  # How often should the population be sampled. Only sampled populations are saved.
  sample <- 1000

%%end.rcode




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Constant density size. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%begin.rcode DensSimsFuncs

  #################################
  # Density sim definitions       #
  #################################

  # Keep density constant. Alter population size via colonySize

  # How many simulations to run?
  nDensSims <- 15 * each

  # Parameters for constant density
  #   Area and meanColonySize are the actal input arguments
  pop <- rep(c(2000, 4000, 8000, 16000, 32000), each = 3 * each)
  colonySize <- pop / 20
  
  # make a copy of colonySize for use in text.
  dep1 <- unique(colonySize)

  area <- pop / 0.8
  side <- sqrt(area)

  tran <- rep(c(0.1, 0.2, 0.3), times = 5 * each)

# Define our simulation function.
fullSim <- function(x){

  # Set seed (this is set within each parallel simulation to prevent reusing random numbers).
  simSeed <- paste0(seed, x)
  set.seed(simSeed)

  # Make the population.
  p <- makePop(space = side[x], 
               transmission = tran[x], 
               meanColonySize = colonySize[x], 
               nColonies = 20, 
               model = 'SIR', 
               events = nEvent, 
               nPathogens = 2, 
               recovery = 0.5,  
               sample = sample, 
               dispersal = 0.01, 
               birth = 0.05, 
               death = 0.05,
               crossImmunity = 0.1, 
               infectDeath = 0,
               maxDistance = 100)

  p$I[1, , 1] <- colonySize[x] - 20

  # Seed endemic pathogen.
  p$I[3, , 1] <- 20
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, 1)

  # Burn in simulation
  p <- runSim(p, end = invadeT)

  # Seed invading pathogen.
  p$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, (invadeT + 1) %% sample)

  # Continue simulation
  p <- runSim(p, start = invadeT + 1, end = 'end')

  # Was the invasion succesful?
  invasion <- findDisDistr(p, 2)[1] > 0

  # Save summary stats
  d <- data.frame(transmission = NA)

  d$transmission <- p$parameters['transmission']
  d$dispersal <- p$parameters['dispersal']
  d$nExtantDis <- sum(findDisDistr(p, 2) > 0)
  d$nPathogens <- p$parameters['nPathogens']
  d$meanK <- sum(p$adjacency != 0 )/p$parameters['nColonies']
  d$maxDistance <- p$parameters['maxDistance']
  d$nEvents <- p$parameters['events']
  d$colonySize <- p$parameters['meanColonySize']
  d$colonyNumber <- p$parameters['nColonies']
  d$pop <- p$parameters['meanColonySize'] * p$parameters['nColonies']
  d$area <- p$parameters['space']^2
  d$dens <- d$pop / d$area


  message(paste0("finished ", x, ". Invasion: ", invasion ))
  message(paste('trans:', d$transmission, 'nColonies:', d$colonyNumber, 
    'colonySize:', d$colonySize, 'dens:', d$dens, 'pop:', d$pop))
  
  if(saveData){ 
    file <- paste0('data/Chapter4/DensSim_', formatC(x, width = 4, flag = '0'), '.RData')
    save(p, file = file)
  }

  rm(p)

  return(d)

}
%%end.rcode

%%begin.rcode runDensSim, eval = F, cache = TRUE

# Create and set seed (seed object is used to set seed in each seperate simulation.'
seed <- 1
set.seed(seed)

# If we want to save the data, make a directory for it.
if(saveData){
  dir.create('data/Chapter4/')
}

# Run sims.
z <- mclapply(1:nDensSims, . %>% fullSim, mc.preschedule = FALSE, mc.cores = nCores)

z <- do.call(rbind, z)

# Save summary data.
write.csv(z, file = 'data/Chapter4/DensSims.csv')

%%end.rcode


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Constant density 2. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%begin.rcode Dens2SimsFuncs

  #################################
  # Density2 sim definitions      #
  #################################

  # Keep density constant. Alter population size via colonyNumber


  # How many simulations to run?
  nDens2Sims <- 15 * each

  # Parameters for constant density
  #   Area and meanColonySize are the actal input arguments
  pop <- rep(c(2000, 4000, 8000, 16000, 32000), each = 3 * each)
  colonySize <- 400
  colonyNumber <- pop / colonySize
  
  # make a copy of colony number for use in text
  dep2 <- unique(colonyNumber )

  area <- pop / 0.8
  side <- sqrt(area)




  tran <- rep(c(0.1, 0.2, 0.3), times = 5 * each)

# Define our simulation function.
fullSim <- function(x){

  # Set seed (this is set within each parallel simulation to prevent reusing random numbers).
  simSeed <- paste0(seed, x)
  set.seed(simSeed)

  # Make the population.
  p <- makePop(space = side[x], 
               transmission = tran[x], 
               meanColonySize = colonySize, 
               nColonies = colonyNumber[x], 
               model = 'SIR', 
               events = nEvent, 
               nPathogens = 2, 
               recovery = 0.5,  
               sample = sample, 
               dispersal = 0.01, 
               birth = 0.05, 
               death = 0.05,
               crossImmunity = 0.1, 
               infectDeath = 0,
               maxDistance = 100)

  p$I[1, , 1] <- colonySize - 20

  # Seed endemic pathogen.
  p$I[3, , 1] <- 20
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, 1)

  # Burn in simulation
  p <- runSim(p, end = invadeT)

  # Seed invading pathogen.
  p$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, (invadeT + 1) %% sample)

  # Continue simulation
  p <- runSim(p, start = invadeT + 1, end = 'end')

  # Was the invasion succesful?
  invasion <- findDisDistr(p, 2)[1] > 0

  # Save summary stats
  d <- data.frame(transmission = NA)

  d$transmission <- p$parameters['transmission']
  d$dispersal <- p$parameters['dispersal']
  d$nExtantDis <- sum(findDisDistr(p, 2) > 0)
  d$nPathogens <- p$parameters['nPathogens']
  d$meanK <- sum(p$adjacency != 0 )/p$parameters['nColonies']
  d$maxDistance <- p$parameters['maxDistance']
  d$nEvents <- p$parameters['events']
  d$colonySize <- p$parameters['meanColonySize']
  d$colonyNumber <- p$parameters['nColonies']
  d$pop <- p$parameters['meanColonySize'] * p$parameters['nColonies']
  d$area <- p$parameters['space']^2
  d$dens <- d$pop / d$area


  message(paste0("finished ", x, ". Invasion: ", invasion ))
  message(paste('trans:', d$transmission, 'nColonies:', d$colonyNumber, 
    'colonySize:', d$colonySize, 'dens:', d$dens, 'pop:', d$pop))

  if(saveData){ 
    file <- paste0('data/Chapter4/DensSim_', formatC(x, width = 4, flag = '0'), '.RData')
    save(p, file = file)
  }

  rm(p)

  return(d)

}
%%end.rcode

%%begin.rcode runDens2Sim, eval = runAllSims, cache = TRUE

# Create and set seed (seed object is used to set seed in each seperate simulation.'
seed <- 2
set.seed(seed)

# If we want to save the data, make a directory for it.
if(saveData){
  dir.create('data/Chapter4/')
}

# Run sims.
z <- mclapply(1:nDens2Sims, . %>% fullSim, mc.preschedule = FALSE, mc.cores = nCores)

z <- do.call(rbind, z)

# Save summary data.
write.csv(z, file = 'data/Chapter4/Dens2Sims.csv')

%%end.rcode




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Constant Population. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%begin.rcode PopSimsFuncs

  #################################
  # Population sim definitions    #
  #################################

  # Keep population constant. Alter density by area

  # How many simulations to run?
  nPopSims <- 15 * each

  # Parameters for constant density
  #   Area and meanColonySize are the actal input arguments
  pop <- 8000

  colonySize <- pop / 20

  area <- rep(c(40000, 20000, 10000, 5000, 2500), each = 3 * each)
  side <- sqrt(area)
  
  
  # save density values for use in text.
  dep3 <- c(40000, 20000, 10000, 5000, 2500)
  depDens <- pop / dep3

  tran <- rep(c(0.1, 0.2, 0.3), times = 5 * each)

# Define our simulation function.
fullSim <- function(x){

  # Set seed (this is set within each parallel simulation to prevent reusing random numbers).
  simSeed <- paste0(seed, x)
  set.seed(simSeed)

  # Make the population.
  p <- makePop(space = side[x], 
               transmission = tran[x], 
               meanColonySize = colonySize, 
               nColonies = 20, 
               model = 'SIR', 
               events = nEvent, 
               nPathogens = 2, 
               recovery = 0.5,  
               sample = sample, 
               dispersal = 0.01, 
               birth = 0.05, 
               death = 0.05,
               crossImmunity = 0.1, 
               infectDeath = 0,
               maxDistance = 100)

  p$I[1, , 1] <- colonySize - 20

  # Seed endemic pathogen.
  p$I[3, , 1] <- 20
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, 1)

  # Burn in simulation
  p <- runSim(p, end = invadeT)

  # Seed invading pathogen.
  p$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, (invadeT + 1) %% sample)

  # Continue simulation
  p <- runSim(p, start = invadeT + 1, end = 'end')

  # Was the invasion succesful?
  invasion <- findDisDistr(p, 2)[1] > 0

  # Save summary stats
  d <- data.frame(transmission = NA)


  d$transmission <- p$parameters['transmission']
  d$dispersal <- p$parameters['dispersal']
  d$nExtantDis <- sum(findDisDistr(p, 2) > 0)
  d$nPathogens <- p$parameters['nPathogens']
  d$meanK <- sum(p$adjacency != 0 )/p$parameters['nColonies']
  d$maxDistance <- p$parameters['maxDistance']
  d$nEvents <- p$parameters['events']
  d$colonySize <- p$parameters['meanColonySize']
  d$colonyNumber <- p$parameters['nColonies']
  d$pop <- p$parameters['meanColonySize'] * p$parameters['nColonies']
  d$area <- p$parameters['space']^2
  d$dens <- d$pop / d$area


  message(paste0("finished ", x, ". Invasion: ", invasion ))
  message(paste('trans:', d$transmission, 'nColonies:', d$colonyNumber, 
    'colonySize:', d$colonySize, 'dens:', d$dens, 'pop:', d$pop))
  
  if(saveData){ 
    file <- paste0('data/Chapter4/PopSim_', formatC(x, width = 4, flag = '0'), '.RData')
    save(p, file = file)
  }

  rm(p)

  return(d)

}
%%end.rcode

%%begin.rcode runPopSim, eval = runAllSims, cache = TRUE

# Create and set seed (seed object is used to set seed in each seperate simulation.'
seed <- 3
set.seed(seed)

# If we want to save the data, make a directory for it.
if(saveData){
  dir.create('data/Chapter4/')
}

# Run sims.
z <- mclapply(1:nPopSims, . %>% fullSim, mc.preschedule = FALSE, mc.cores = nCores)

z <- do.call(rbind, z)

# Save summary data.
write.csv(z, file = 'data/Chapter4/PopSims.csv')

%%end.rcode


%%begin.rcode colonyNetCaptions

colonyNetTitle <- 'Example metapopulation networks'

colonyNetCapt <- '
Examples of the metapopulation networks used.
They show the smallest number of colonies (five) and the default (20).
They also show the default ($10^4\\,\\text{km}^2$) and largest areas ($4\\times10^4\\,\\text{km}^2$).
As area increases, the number of connections each subpopulation has decreases as seen by the changes in mean degree, $\\bar{k}$.
'


%%end.rcode

%%begin.rcode colonyNetworkPlots, fig.height = 5, fig.cap = colonyNetCapt, fig.scap = colonyNetTitle, out.width = '0.9\\textwidth', fig.showtext = TRUE
font.add.google('Lato', regular.wt = 300)

set.seed(3)

  #   Area and meanColonySize are the actal input arguments
  pop <- c(2000, 4000, 8000, 16000, 32000)
  colonySize <- 400
  colonyNumber <- pop / colonySize

  area <- pop / 0.8
  side <- sqrt(area)


# Make the population.
p1 <- makePop(space = side[3], 
             transmission = 0.1, 
             meanColonySize = colonySize, 
             nColonies = colonyNumber[1], 
             model = 'SIR', 
             events = 20,
             sample = 2,
             maxDistance = 100)
k1 <- sum(p1$adjacency != 0 )/p1$parameters['nColonies']


# Make the population.
p2 <- makePop(space = side[5], 
             transmission = 0.1, 
             meanColonySize = colonySize, 
             nColonies = colonyNumber[3], 
             model = 'SIR', 
             events = 20,
             sample = 2,
             maxDistance = 100)
k2 <- sum(p2$adjacency != 0 )/p2$parameters['nColonies']

# Make the population.
p3 <- makePop(space = side[3], 
             transmission = 0.1, 
             meanColonySize = colonySize, 
             nColonies = colonyNumber[3], 
             model = 'SIR', 
             events = 20,
             sample = 2,
             maxDistance = 100)
k3 <- sum(p3$adjacency != 0 )/p3$parameters['nColonies']

# Make the population.
p4 <- makePop(space = side[5], 
             transmission = 0.1, 
             meanColonySize = colonySize, 
             nColonies = colonyNumber[1], 
             model = 'SIR', 
             events = 20,
             sample = 2,
             maxDistance = 100)
k4 <- sum(p4$adjacency != 0 )/p4$parameters['nColonies']


labSz <- 1
bigy <- 11.4
bigx <- 10.6
titleSz <- 5
axSz <- 4

par(mfrow = c(2,2))


plotColonyNet(p1, area = side[5], cex = 0.2, mar = c(bigx, bigy, 3, 2))
axis(2, col = 'grey', cex.axis = axSz, col.axis = 'grey', family = 'Lato', font = 2)
axis(1, col = 'grey', labels = FALSE)
title(main = bquote(italic(bar(k)) ~ '='~ .(k1)), cex.main = titleSz, family = 'Lato',  line = 0.5)
mtext(side = 2,  line = 7.8, text = 'Longitude', cex = labSz, family = 'Lato')

plotColonyNet(p4, area = side[5], cex = 0.2, mar = c(bigx, 6, 3, 2))
axis(2, col = 'grey', labels = FALSE)
axis(1, col = 'grey', labels = FALSE)
title(main = bquote(italic(bar(k)) ~ '='~ .(k4)), cex.main = titleSz, family = 'Lato',  line = 0.5)

plotColonyNet(p3, area = side[5], cex = 0.2, mar = c(bigx, bigy, 3, 2))
axis(2, col = 'grey', cex.axis = axSz, col.axis = 'grey', family = 'Lato', font = 2)
axis(1, col = 'grey', labels = FALSE)
axis(1, col = 'grey', cex.axis = axSz, col.axis = 'grey', family = 'Lato', font = 2, line = 3, lwd = 0)
title(main = bquote(italic(bar(k)) ~ '='~ .(k3)), cex.main = titleSz, family = 'Lato',  line = 0.5)
mtext(side = 2,  line = 7.8, text = 'Longitude', cex = labSz, family = 'Lato')
mtext(side = 1,  line = 9.8, text = 'Latitude', cex = labSz, family = 'Lato')

plotColonyNet(p2, area = side[5], cex = 0.2, mar = c(bigx, 6, 3, 2))
axis(1, col = 'grey', labels = FALSE)
axis(1, col = 'grey', cex.axis = axSz, col.axis = 'grey', , family = 'Lato', font = 2, line = 3, lwd = 0)
axis(2, col = 'grey', labels = FALSE)
title(main = bquote(italic(bar(k)) ~ '='~ .(k2)), cex.main = titleSz, family = 'Lato',  line = 0.5)
mtext(side = 1,  line = 9.8, text = 'Latitude', cex = labSz, family = 'Lato')



%%end.rcode




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Methods}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%




\subsection{Metapopulation model}

\tmpsection{Overview}


I used two-pathogen, metapopulation SIR model to compare the roles of demograhic parameters on pathogen species richness.
Specifically I let two identical pathogens (and endemic pathogen and an invading pathogen) compete.
I used presistence or not of the second pathogen as my response variable.
I test whether population abundance is more important than population density.
I then test whether colony size or the number of colonies is the more important component of population abundance.
The multpathogen SIR model is identical to that in Chapter \ref{ch:sims1} and is implemented in R \cite{R}.



In each simulation the population is seeded with 20 individuals infected with pathogen 1 in each colony. 
Pathogen 1 is then allowed to spread and reach equilibrium. 
After \rinline{invadeT} events, 5 individuals infected with disease 2 are added to one colony. 
After another \rinline{nEvent - invadeT} events the invasion of disease 2 is considered successful if any individuals with pathogen/ 2 still remain.

\subsection{Dependant variables}

Three dependant variables were varied: colony size, number of colonies and area.
From these parameters, population abundance and population density can be calculated.
The default values of these parameters was a population size of 8000 individuals split into 20 colonies of 400.
The default area of the simulations was 

Three sets of simulations were run.
First, colony size was varied using values \rinline{dep1[-5]} and \rinline{dep1[5]}.
The number of colonies was kept constant and so population abundance varied with colony size.
Area was scaled to keep population density constant. 
Secondly, number of colonies (and therefore population abundance) was varied and again area was varied to keep density constant.
\rinline{dep2[-5]} and \rinline{dep2[5]} colonies were used.
Finally, colony size and number of colonies were kept constant (therefore keeping population abundance constant) and area was varied alone to alter population density. 
The values of area used were \rinline{dep3[-5]} and \rinline{dep3[5]} which gave density values of \rinline{depDens[-5]} and \rinline{depDens[5]}.

The affects of area occur through changing the metapopulation network.
The metapopulation structure was created for each simulation by randomly placing colonies in space.
The spatial scale of the simulations vary between \rinline{min(area)} and \rinline{max(area)} km$^2$ (space is given in kilometers even though they are oin fact arbitrary units for simplicity).
This corresponds to square areas with sides of \rinline{sqrt(min(area))} to \rinline{sqrt(max(area))} km).
Dispersal can occur between two colonies if they are within 100 kilometers of each other.
This does not guarentee that the population is fully connected but as the endemic pathogen is seeded in all colonies, the invading pathogen cannot be seeded into a fully susceptible colony.
This was considered more realistic than repeatedly resampling the population until a fully connected population occured.
Given this setup, simulations with low densities had relatively unconnected metapopulation networks.






\subsection{Other Parameters}
%TODO switch all b's to d or something else, so that b can be used for regression coeficients. In all eqns in +ch2 as well.

The fixed parameters used are chosen to roughly reflect realistic wild bat populations. 
The death rate $d$ is set as 0.05 per year giving a generation time of 20 years.
The birth rate is set to be equal to $d$ so that the population size is stable.
The recovery rate $\gamma$ is set to 0.1 giving a average infection duration of 10 years. 
This is therefore a chronic infection. 
It is very difficult to directly estimate infection durations in wild populations.
But it seems that these infections might be long lasting \cite{}.

Cross immunity is set to 0.1 so that an individual infected with one disease is 90\% less likely to be infected with another.
This is a rather arbitrary value.
However, the model assumes complete cross immunity after infection.
Furthermore, the rationale of the model is that the invading species might be a newly speciated strain of the endemic species.
Therefore cross immunity is likely to be very strong.

The population size of each subpopulation is set to 3000. 
This is appropriate for many bat species \cite{jones2009pantheria}, especially the large, frugivorous \emph{Pteropodidae} that have been particularly associated with recent zoonotic diseases.


Three values of the transmission rate $\beta$ are used, 0.1, 0.2 and 0.3.
All simulations are run under all three transmission rates as this is a fundamental parameter that changes the broad dynamics of the pathogens.


\subsection{Statistical comparisons}

I tested two hypotheses.
Firstly I tested the hypothesis that an increase in population abundance creates a stronger increase in invasion probability (of the second pathogen) than an equal increase in population density.
Secondly I tested the hypothesis that ana increase in colony size creates a stronger increase in invasion probability an an equal increase in number of colonies.
To statistically test these hypotheses I combined the results from different simulations and fitted multiple logistic regressions, centering and scaling the dependant variables.
Specifically, I fitted the model $\text{invasion} = b_1 \text{density} + b_2 \text{colony size} + b_3 \text{number of colonies} + c + \epsilon$ where $c$ is a fitted intercept and $\epsilon$ is a binomially distributed error term.
To test the first hypothesis I compared the size (and 95\% confidence intervals) of $b_1$ to $b_2$ and $b_3$.
To test the second hypothesis I compared $b_2$ to $b_3$.








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Results}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%begin.rcode calcMeans
# Constant density, altered colony size

dens1 <- read.csv('data/Chapter4/DensSims.csv') %>% dplyr::select(-X)

dens1Means <- dens1 %>%
                filter(nExtantDis > 0) %>%
                group_by(transmission, colonySize, colonyNumber) %>%
                summarise(success = sum(nExtantDis == 2), sampleSize = n(), pop = mean(as.numeric(as.character(pop))))


dens1Means <- dens1Means %>%
                cbind(., vary = 'colonySize', binom.confint(.$success, .$sampleSize, conf.level = 0.95, methods = "exact"))

# fit glms to each transmission value

dens1Model <- dens1 %>%
               filter(nExtantDis > 0) %>%
               mutate(invasion = as.numeric(nExtantDis == 2)) %>%
               group_by(transmission) %>%
               do(fit = glm(invasion ~ pop, data = ., family = 'binomial')) %>%
               mutate(vary = 'colonySize')


# Constant density, altered colony number

dens2 <- read.csv('data/Chapter4/Dens2Sims.csv') %>% dplyr::select(-X)

dens2Means <- dens2 %>%
                filter(nExtantDis > 0) %>%
                group_by(transmission, colonySize, colonyNumber) %>%
                summarise(success = sum(nExtantDis == 2), sampleSize = n(), pop = mean(as.numeric(as.character(pop))))


dens2Means <- dens2Means %>%
                cbind(., vary = 'colonyNumber',  binom.confint(.$success, .$sampleSize, conf.level = 0.95, methods = "exact"))

# Fit glms to each transmission value
dens2Model <- dens2 %>%
               filter(nExtantDis > 0) %>%
               mutate(invasion = as.numeric(nExtantDis == 2)) %>%
               group_by(transmission) %>%
               do(fit = glm(invasion ~ pop, data = ., family = 'binomial')) %>%
               mutate(vary = 'colonyNumber')

# Constant population, altered area

pop <- read.csv('data/Chapter4/PopSims.csv') %>% dplyr::select(-X)

popMeans <- pop %>%
                filter(nExtantDis > 0) %>%
                group_by(transmission, area) %>%
                summarise(success = sum(nExtantDis == 2), sampleSize = n())


popMeans <- popMeans %>%
                cbind(., binom.confint(.$success, .$sampleSize, conf.level = 0.95, methods = "exact"))

#popModels <- pop %>%
#               mutate(invasion = as.numeric(nExtantDis == 2)) %>%
#               group_by(transmission) %>%
#               do(glm(.$invasion ~ .$dens, family = 'binomial') %>% tidy)


# fit glms to each transmission value
popModel <- pop %>%
               filter(nExtantDis > 0) %>%
               mutate(invasion = as.numeric(nExtantDis == 2)) %>%
               group_by(transmission) %>%
               do(fit = glm(invasion ~ dens, data = ., family = binomial(link = logit))) %>%
               mutate(vary = 'Density')



%%end.rcode



%%begin.rcode plotMeans, show.figs = extraFigs



#ggplot(dens1Means, aes(x = factor(transmission), y = mean, fill = factor(colonySize))) +
#  geom_bar(stat = 'identity', position=position_dodge()) +
#  geom_errorbar(aes(ymin = lower, ymax = upper),
#                width=.2,                   
#                position = position_dodge(.9)) +
#  xlab('Transmission') + 
#  ylab('Prop. Invasions') +
#  ylim(0, 1) +
#  scale_fill_poke(name="Colony Size", 
#                 #labels=c('0.001', '0.01', '0.1'), 
#                 pokemon = 'Swampert',
#                 spread = 5)



#ggplot(dens2Means, aes(x = factor(transmission), y = mean, fill = factor(colonyNumber))) +
#  geom_bar(stat = 'identity', position=position_dodge()) +
#  geom_errorbar(aes(ymin = lower, ymax = upper),
#                width=.2,                   
#                position = position_dodge(.9)) +
#  ylim(0, 1) +
#  xlab('Transmission') + 
#  ylab('Prop. Invasions') +
#  scale_fill_poke(name="Colony Number", 
#                 #labels=c('0.001', '0.01', '0.1'), 
#                 pokemon = 'Swampert',
#                 spread = 5)


#ggplot(popMeans, aes(x = factor(transmission), y = mean, fill = factor(area))) +
#  geom_bar(stat = 'identity', position=position_dodge()) +
#  geom_errorbar(aes(ymin = lower, ymax = upper),
#                width=.2,                   
#                position = position_dodge(.9)) +
#  xlab('Transmission') + 
#  ylab('Prop. Invasions') +
#  ylim(0, 1) +
#  scale_fill_poke(name="Area", 
#                 #labels=c('0.001', '0.01', '0.1'), 
#                 pokemon = 'Swampert',
#                 spread = 5) 

%%end.rcode




%%begin.rcode predictModels

# Predict seperate glms for plotting

popPred <- seq(min(dens2$pop), max(dens2$pop), length.out = 200)

densPreds <- rbind(dens1Model, dens2Model) %>%
               apply(., 1, 
                 function(m) predict(m['fit'][[1]], newdata = data.frame(pop = popPred), type = 'response') %>%
                               data.frame(pred = ., pop = popPred, transmission = m$transmission, vary = m$vary)
               ) %>%
               do.call(rbind, .)


%%end.rcode


%%begin.rcode transMeansCapt

transMeansCapt <- '
Comparison of the effect of population size on probability of invasion when population size is altered by changing colony size or colony number.
Relationship is shown seperately for each transmission value.
It can be seen that changes in colony size give a much greater increase in invasion probability thatn changes in colony number.
'

transMeansTitle <- 'Comparison of the probability of invasion when population size is altered by changing colony size or colony number.'

%%end.rcode

%%begin.rcode plotTransMeans, fig.cap = transMeansCapt, fig.scap = transMeansTitle, out.width = '0.9\\textwidth', fig.show = extraFigs


rbind(dens1Means, dens2Means) %>%
ggplot(., aes(x = pop, y = mean, colour = vary)) +
  geom_line(data = densPreds, aes(x = pop, y = pred, colour = vary)) +
  facet_grid(transmission ~ .) +
  geom_point() +
  geom_errorbar(aes(ymin = lower, ymax = upper),
              width=.2) +
  ylab('Prop. Invasions') +
  xlab('Population size') +
  ylim(0, 1) +
  scale_colour_poke(name="Variable varied", 
               labels=c('Colony Size', 'Colony Number'), 
               pokemon = 'Swampert',
               spread = 2) +
  scale_y_continuous(breaks = c(0, 0.5, 1), labels = c('0.0', '0.5', '0.1')) 

%%end.rcode



%%begin.rcode valueChangeMeansCapt

valueChangeMeansCapt <- '
Comparison of the effect of colony size, colony number and area on probability of invasion.
Default values are: colony number = 20, colony size = 400 and density = 0.8 animals per unit area.
The $x$-axis shows the relative change in each of these values ($\\times 0.25, 0.5, 1, 2$ and $4$).
For colony size and number, area is altered  so that density remains constant.
For density, population size is constant at 8,000 and area is altered.
Relationships are shown seperately for each transmission value.
Each point is the mean of \rinline{each} simulations and bars are 95\\% confidence intervals.
'

valueChangeMeansTitle <- 'Comparison of the probability of invasion when population size is altered by changing colony size or colony number.'

%%end.rcode

%%begin.rcode plotValueChangeMeans, fig.cap = valueChangeMeansCapt, fig.scap = valueChangeMeansTitle, out.width = '\\textwidth'

# Convert to percentage change in density, colonysize or colony number.


d <- rbind(popMeans %>% 
             mutate(ValueChange = as.numeric(as.character(area))/median(as.numeric(as.character(area))), vary = 'Density') %>%
             dplyr::select(ValueChange, transmission, mean, lower, upper, vary),
           dens1Means %>% 
             mutate(ValueChange = as.numeric(as.character(colonySize))/median(as.numeric(as.character(colonySize))), vary = 'colonySize') %>%
             dplyr::select(ValueChange, transmission, mean, lower, upper, vary),
           dens2Means %>% 
             mutate(ValueChange = as.numeric(as.character(colonyNumber))/median(as.numeric(as.character(colonyNumber))), vary = 'colonyNumber') %>%
             dplyr::select(ValueChange, transmission, mean, lower, upper, vary)
     )

# Refit all glms
#   First convert all raw data to percentage change, then fit.


percChange <- rbind(pop %>% 
                      mutate(ValueChange = as.numeric(as.character(area))/median(as.numeric(as.character(area))), 
                             invasion = as.numeric(nExtantDis == 2),
                             vary = 'Density') %>%
                      filter(nExtantDis > 0) %>%
                      dplyr::select(ValueChange, transmission, invasion, vary),
                    dens1 %>% 
                      mutate(ValueChange = as.numeric(as.character(colonySize))/median(as.numeric(as.character(colonySize))), 
                             invasion = as.numeric(nExtantDis == 2),
                             vary = 'colonySize') %>%
                      filter(nExtantDis > 0) %>%
                      dplyr::select(ValueChange, transmission, invasion, vary),
                    dens2 %>% 
                      mutate(ValueChange = as.numeric(as.character(colonyNumber))/median(as.numeric(as.character(colonyNumber))), 
                             invasion = as.numeric(nExtantDis == 2),
                             vary = 'colonyNumber') %>%
                      filter(nExtantDis > 0) %>%
                      dplyr::select(ValueChange, transmission, invasion, vary)
               )

# Fit glms to value change data
percChangeModels <- percChange %>%
                      group_by(transmission, vary) %>%
                      do(fit = glm(invasion ~ ValueChange, data = ., family = binomial(link = logit)))

# Predict from glms for plotting

percChangeNew <- seq(min(percChange$ValueChange), max(percChange$ValueChange), length.out = 200)

percChangePreds <- percChangeModels %>%
                       apply(., 1, 
                     function(m) predict(m['fit'][[1]], newdata = data.frame(ValueChange = percChangeNew), type = 'response') %>%
                                   data.frame(pred = ., ValueChange = percChangeNew, transmission = m$transmission, vary = m$vary)
                   ) %>%
                   do.call(rbind, .)

#ggplot(d, aes(x = ValueChange, y = mean, colour = vary)) +
#  geom_line(data = percChangePreds, aes(x = ValueChange, y = pred, colour = vary)) +
#  geom_point() +
#  geom_errorbar(aes(ymin = lower, ymax = upper),
#              width=.01) +
#  ylab('Prop. Invasions') +
#  xlab('Amount Varied') +
#  ylim(0, 1) +
#  scale_colour_poke(name="Variable varied", 
#               labels=c( 'Colony Number', 'Colony Size', 'Density'), 
#               pokemon = 'Swampert',
#               spread = 3) +
#  scale_y_continuous(breaks = c(0, 0.5, 1), labels = c('0.0', '0.5', '0.1')) +
#  scale_x_continuous(breaks = c(0.25, 0.5, 1, 2, 4), labels = c(0.25, 0.5, 1, 2, 4), trans = 'log10') +
#  facet_grid(transmission ~ ., labeller = label_bquote(beta == .(transmission))) 


d$transmission <- factor(d$transmission, labels = c('beta == 0.1', '0.2', '0.3'))
percChangePreds$transmission <- factor(percChangePreds$transmission, labels = c('beta == 0.1', '0.2', '0.3'))

ggplot(d, aes(x = ValueChange, y = mean, colour = vary)) +
  geom_point() +
  geom_line(data = percChangePreds, aes(x = ValueChange, y = pred, colour = vary)) +
  geom_point() +
  geom_errorbar(aes(ymin = lower, ymax = upper),
              width=.01) +
  ylab('Prop. Invasions') +
  xlab('Amount Varied') +
  ylim(0, 1) +
  scale_colour_poke(name="Variable varied", 
               labels=c( 'Colony Number', 'Colony Size', 'Density'), 
               pokemon = 'Swampert',
               spread = 3) +
  scale_y_continuous(breaks = c(0, 0.5, 1), labels = c('0.0', '0.5', '0.1')) +
  scale_x_continuous(breaks = c(0.25, 0.5, 1, 2, 4), labels = c(0.25, 0.5, 1, 2, 4), trans = 'log10') +
  facet_grid(transmission ~ ., labeller = label_parsed) 


%%end.rcode


%%begin.rcode plotKDistrs, show.figs = extraFigs


#  ggplot(dens2, aes(x = factor(colonyNumber), y = meanK)) +
#    geom_boxplot() 


#  ggplot(dens2, aes(x = factor(area), y = meanK)) +
#    geom_boxplot() 

#  ggplot(dens1, aes(x = factor(area), y = meanK)) +
#    geom_boxplot() 


#  ggplot(pop, aes(x = factor(area), y = meanK)) +
#    geom_boxplot() 

%%end.rcode

%%begin.rcode plotKcapt

plotKcapt <- ''

plotKtitle <- 'Change in average network degree with increasing area'


%%begin.rcode plotK, fig.cap = plotKcapt, fig.scap = plotKtitle, out.width = '0.7\\textwidth'


ggplot(dens1, aes(x = factor(area), y = meanK, colour = 'a', fill = 'a')) +
  geom_boxplot(outlier.size = 1, size = 0.3, outlier.colour = grey(0.3), 
    notch = TRUE, width = 0.4, notchwidth = 0.6) +
  scale_colour_manual(values = pokepal('vileplume')[4]) +
  scale_fill_manual(values = pokepal('vileplume')[7]) +
  stat_summary(geom = "crossbar", width = 0.25, fatten = 2, 
    fun.data = function(x){ return(c(y = median(x), ymin = median(x), ymax = median(x))) }) +
  theme(legend.position = 'none') + 
  scale_x_discrete(labels = c('2500', '5000', '10000', '20000', '40000')) +
  xlab(expression(paste('Area ', (km^2)))) +
  ylab(expression(paste('Mean degree, ', bar(k)))) +
  ylim(0, 20)

%%end.rcode


%%begin.rcode statTests 


#jointModel  <- rbind(
#                 dens1 %>% mutate(vary = 'colonySize'), 
#                 dens2 %>% mutate(vary = 'colonyNumber')
#               ) %>%
#               mutate(invasion = as.numeric(nExtantDis == 2)) %>%
#               group_by(transmission) %>%
#               do(fit = glm(invasion ~ colonySize + colonyNumber, data = ., family = 'binomial')) %>%

combDensModel <- rbind(dens1, dens2) %>% 
                   mutate(invasion = nExtantDis == 2 ) %>%
                   group_by(transmission) %>% 
                   mutate(colonySize = scale(colonySize), colonyNumber = scale(colonyNumber)) %>% 
                   do(glm(invasion ~ colonySize + colonyNumber, data = ., family = binomial) %>% tidy)


combModel <- rbind(dens1, dens2, pop) %>% 
               mutate(invasion = nExtantDis == 2 ) %>%
               group_by(transmission) %>% 
               mutate(colonySize = scale(colonySize), colonyNumber = scale(colonyNumber), area = scale(area)) %>% 
               do(glm(invasion ~ colonySize + colonyNumber + area, data = ., family = binomial) %>% tidy)

combModel <- rbind(dens1, dens2, pop) %>% 
               mutate(invasion = nExtantDis == 2 ) %>%
               group_by(transmission) %>% 
               mutate(colonySize = scale(colonySize), colonyNumber = scale(colonyNumber), area = scale(area)) %>% 
               do(glm(invasion ~ colonySize + colonyNumber + area, data = ., family = binomial) %>% confint_tidy) %>%
               ungroup %>%
               dplyr::select(conf.low, conf.high) %>%
               cbind(combModel, .)

%%end.rcode


\begin{table}

\caption[Regression results]{
Regression results comparing affects of colony size, colony number and area.
Coefficients are from multiple logistic regressions with invasion as the dependant variable and all independant variables being scaled and centred.
Colony size and colony number were varied while keeping density equal while density was varied by changing area while keeping population size equal.
$p$ is for test against the null hypothesis that  $b = 0$.
}
\label{t:regrCoefs}
\centering
\begin{tabular}{@{}rlrrr@{}}
\toprule
$\beta$ & \emph{Variable} & \emph{Estimate}, $b$ & (95\% \emph{CI}) & $p$\\
\midrule
0.1   &    Intercept     & \rinline{combModel$estimate[1]} & (\rinline{combModel$conf.low[1]}, \rinline{combModel$conf.high[1]}) & $< 10^{-5}$ \\
      &    Colony Size   & \rinline{combModel$estimate[2]} & (\rinline{combModel$conf.low[2]}, \rinline{combModel$conf.high[2]}) & $< 10^{-5}$ \\
      &    Colony Number & \rinline{combModel$estimate[3]} & (\rinline{combModel$conf.low[3]}, \rinline{combModel$conf.high[3]}) & \rinline{combModel$p.value[3]} \\
      &    Density       & \rinline{combModel$estimate[4]} & (\rinline{combModel$conf.low[4]}, \rinline{combModel$conf.high[4]}) & \rinline{combModel$p.value[4]} \\[1em]
0.2   &    Intercept     & \rinline{combModel$estimate[5]} & (\rinline{combModel$conf.low[5]}, \rinline{combModel$conf.high[5]}) & $< 10^{-5}$ \\
      &    Colony Size   & \rinline{combModel$estimate[6]} & (\rinline{combModel$conf.low[6]}, \rinline{combModel$conf.high[6]}) & $< 10^{-5}$ \\
      &    Colony Number & \rinline{combModel$estimate[7]} & (\rinline{combModel$conf.low[7]}, \rinline{combModel$conf.high[7]}) & \rinline{combModel$p.value[7]} \\
      &    Density       & \rinline{combModel$estimate[8]} & (\rinline{combModel$conf.low[8]}, \rinline{combModel$conf.high[8]}) & \rinline{combModel$p.value[8]} \\[1em]
0.3   &    Intercept     & \rinline{combModel$estimate[9]} & (\rinline{combModel$conf.low[9]}, \rinline{combModel$conf.high[9]}) & $< 10^{-5}$ \\
      &    Colony Size   & \rinline{combModel$estimate[10]} & (\rinline{combModel$conf.low[10]}, \rinline{combModel$conf.high[10]}) & $< 10^{-5}$ \\
      &    Colony Number & \rinline{combModel$estimate[11]} & (\rinline{combModel$conf.low[11]}, \rinline{combModel$conf.high[11]}) & \rinline{combModel$p.value[11]} \\
      &    Density       & \rinline{combModel$estimate[12]} & (\rinline{combModel$conf.low[12]}, \rinline{combModel$conf.high[12]}) & \rinline{combModel$p.value[12]} \\

\bottomrule



\end{tabular}



\end{table}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Discussion}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Restate the gap and the main result}

Empirical studies on the role of population structure on the are equivocal and cannot examine the specific mechanisms by which pathogen communities are created and maintained.
I have used mechanistic, metapopulation models to test whether increased population structure can promote pathogen richness by facilitating invasion of new pathogens.



\subsection{Link results to consequences}

\subsubsection{Population structure does not affect pathogen richness}

Probably because dynamics are dominated by local processes.
This goes against many predictions that increasing $R_0$ increases pathogen richness.
Further work could examine reduced col  ony sizes to test when global structure become more important.
Measures of population structure should not be used to predict zoonotic potential.

\subsubsection{Dispersal does not affect pathogen richness}



\subsubsection{Network connectedness does not affect pathogen richness}

This is in direct contrast to \cite{campos2006pathogen}. 
However, the model in \cite{campos2006pathogen} is a contact network, so increasing the connectedness increases the chance of succesful transmission events for the first few transmission generations.
This lends support to the idea that I found now affect of connectedness due to the dominance of local dynamics.

Network connectedness can be seen as a function of average dispersal distance, density and colony size.
A high density species with small colony sizes must have colonies relatively close together.
Therefore colonies would be more likely to be connected for a given dispersal distance. 


\subsection{Discuss assumptions}

\subsubsection{Complete cross-immunity}

I have assumed that once recovered, individuals are immune to both pathogens. 
Furthermore, when a coinfected individual recovers from one pathogen, it immediately recovers from the other as well.
This is probably a fairly reasonable assumption given that I am modelling a newly evolved strain.
However, further work could relax this assumption using a model similar to \cite{poletto2015characterising} which contains additional classes for `infected with pathogen one, immune to pathogen two' and `infected with pathogen two, immune to pathogen one'.
The model here was formulated such that the study of systems with greater than two pathogens is still computationally feasible while a model such as used in \cite{poletto2015characterising} contains $3^\rho$ classes for a system with $\rho$ pathogen species.
This quickly becomes computationally restrictive.

\subsubsection{Identical strains}

Many papers on pathogen richness have focussed on the evolution of pathogen traits and have considered a trade off between transmission rate and virulence \cite{nowak1994superinfection, nowak1994superinfection} or infectious period \cite{poletto2013host}.
However, here we are interested in host traits.
Therefore we have assumed that pathogen strains are identical.
It is clear however that there are a number of factors that affect pathogen richness and our focus on host population structure does not imply that pathogen traits are not important.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Appendix}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{table}[b!]

\begin{tabular}{lp{5.6cm}p{4.3cm}l}
 & Explanation & Units&Value\\
\hline
$S$ & Susceptible individuals &&\\
$I_q$ & Infectious with diseases $q$ &&\\
$I^+_p$ & Sum of classes infected with pathogen $p$ &\\
$N$ & Number of colonies&& 10\\
$\bar{n}$ & Mean colony starting size && 3000\\
$\beta$ & Transmission rate & Transmission events per year per individual& 2, 5, 10\\
$\gamma$ & Recovery rate & Recovery events per year. & 0.1\\
$\lambda$ & Dispersal & Dispersal events per day per individual& 0.001--0.1\\
$b$ & Birth rate & Births per year per individual& 0.05\\
$d$ & Death rate & Deaths per year per individual & 0.05\\
$d_I$ & Infectious death rate & Additional deaths per day per individual&\\
$\rho$ & No. pathogens && 2\\
$p$ &  Pathogen index i.e. $p\in\{1,2\}$ for pathogens 1 and 2 & &\\
$q$ & Disease class i.e., $q\in\{1,2,12\}$&\\
$\mathcal{V}$ & Neighbourhood of a node &&\\
$t, t^\prime$ & Time and time plus waiting time i.e., $t+\delta$ & Days&\\
$k_i$ & Degree of node $i$ &&\\
$\delta$ & Waiting time until next event & Days&\\
$\alpha$ & Cross immunity & Proportion& 0.1\\
$n, m$ & Colony index &&\\
%$\bm{A}_{mn}$ & Adjacency matrix. & Distance &\\
$\mu$ & Maximum distance for edge to exist & km& 40, 100\\
$\sigma$ & Invading pathogen seed size & & 10\\
$r_i$ & The rate that event $i$ occurs. & Days$^{-1}$&\\
&&&\\
\end{tabular}
\caption{All symbols used.}
\label{t:params2}
\end{table}





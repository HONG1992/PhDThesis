%--------------------------------------------------------------------------------------------------------------------------------%
% Code for "Appendix C: Understanding how population structure affects pathogen richness in a mechanistic model of bat populations"
% Appendix for Chapter 3 of thesis "The role of population structure and size in determining bat pathogen richness"
% by Tim CD Lucas
%
% NB The file is numbered Appendix2 as Chapter 3 was previously Chapter 2 in the thesis.
%
%---------------------------------------------------------------------------------------------------------------------------------%


%%begin.rcode settings, echo = FALSE, cache = FALSE, message = FALSE, results = 'hide', eval = TRUE



# There are figures created in the data analysis which are not in the final chapter document.
#   If TRUE, they will be included in the output.
#   Use 'hide' to remove them.
extraFigs <- 'hide'

#knitr options
#  Set figure prefix as A so that no figures will be overwritten.
opts_chunk$set(cache.path = '.AppCh2Cache/', fig.path = 'figure/A-')
source('misc/KnitrOptions.R')

# ggplot2 theme.
source('misc/theme_tcdl.R')
theme_set(theme_grey() + theme_tcdl)


# Choose the number of cores to use
nCores <- 6

%%end.rcode


%%begin.rcode simsSwitch

runSims <- FALSE
saveData <- TRUE

%%end.rcode

%%begin.rcode libs

library(MetapopEpi)
library(cowplot)
# Run simulations in parallel
library(parallel)

# Plotting
library(ggplot2)
library(palettetown)

%%end.rcode



%%begin.rcode SimLengths2


  # These apply to both topo and disp sims. And probably should apply to extinction sims if I include them.
  # How long should the simulation last?
  nEvent <- 8e5

  # When should the invading pathogen be added.
  invadeT <- 3e5


  # 
  sample <- 1000

%%end.rcode

%%begin.rcode sims, eval = runSims

# Run simulations



  set.seed(2000)

  # Make the population.
  p2 <- makePop(model = 'SIR', events = nEvent, nColonies = 10, nPathogens = 2,   recovery = 1,  sample = sample, dispersal = 0.1, birth = 0.05, death = 0.05, crossImmunity = 0.1, meanColonySize = 3000, infectDeath = 0, transmission = 0.2, maxDistance = 100, colonySpatialDistr = 'circle')

  # Seed endemic pathogen.
  for(i in 1:10){
    p2 <- seedPathogen(p2, 2, n = 200, diffCols = FALSE)
  }

  # Burn in simulation
  p2 <- runSim(p2, end = invadeT)

  # Seed invading pathogen.
  p2$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p2 <- transRates(p2, (invadeT + 1) %% sample)

  # Continue simulation
  p2 <- runSim(p2, start = invadeT + 1, end = 'end')

  save(p2, file = 'data/Chapter2/Appen1.RData')

  set.seed(22)

  # Make the population.
  p2 <- makePop(model = 'SIR', events = nEvent, nColonies = 10, nPathogens = 2,   recovery = 1,  sample = sample, dispersal = 0.1, birth = 0.05, death = 0.05, crossImmunity = 0.1, meanColonySize = 3000, infectDeath = 0, transmission = 0.2, maxDistance = 100, colonySpatialDistr = 'circle')

  # Seed endemic pathogen.
  for(i in 1:10){
    p2 <- seedPathogen(p2, 2, n = 200, diffCols = FALSE)
  }

  # Burn in simulation
  p2 <- runSim(p2, end = invadeT)

  # Seed invading pathogen.
  p2$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p2 <- transRates(p2, (invadeT + 1) %% sample)

  # Continue simulation
  p2 <- runSim(p2, start = invadeT + 1, end = 'end')

  save(p2, file = 'data/Chapter2/Appen22.RData')





  set.seed(24)

  # Make the population.
  p2 <- makePop(model = 'SIR', events = nEvent, nColonies = 10, nPathogens = 2,   recovery = 1,  sample = sample, dispersal = 0.1, birth = 0.05, death = 0.05, crossImmunity = 0.1, meanColonySize = 3000, infectDeath = 0, transmission = 0.2, maxDistance = 100, colonySpatialDistr = 'circle')

  # Seed endemic pathogen.
  for(i in 1:10){
    p2 <- seedPathogen(p2, 2, n = 200, diffCols = FALSE)
  }

  # Burn in simulation
  p2 <- runSim(p2, end = invadeT)

  # Seed invading pathogen.
  p2$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p2 <- transRates(p2, (invadeT + 1) %% sample)

  # Continue simulation
  p2 <- runSim(p2, start = invadeT + 1, end = 'end')

  save(p2, file = 'data/Chapter2/Appen24.RData')





  set.seed(25)

  # Make the population.
  p2 <- makePop(model = 'SIR', events = nEvent, nColonies = 10, nPathogens = 2,   recovery = 1,  sample = sample, dispersal = 0.1, birth = 0.05, death = 0.05, crossImmunity = 0.1, meanColonySize = 3000, infectDeath = 0, transmission = 0.2, maxDistance = 100, colonySpatialDistr = 'circle')

  # Seed endemic pathogen.
  for(i in 1:10){
    p2 <- seedPathogen(p2, 2, n = 200, diffCols = FALSE)
  }

  # Burn in simulation
  p2 <- runSim(p2, end = invadeT)

  # Seed invading pathogen.
  p2$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p2 <- transRates(p2, (invadeT + 1) %% sample)

  # Continue simulation
  p2 <- runSim(p2, start = invadeT + 1, end = 'end')

  save(p2, file = 'data/Chapter2/Appen25.RData')





%%end.rcode 




% --------------------------------------------------------------------------- %
% Invading pathogen plots
% --------------------------------------------------------------------------- %

%%begin.rcode invadeCapts


#p2 <- makePop(model = 'SIR', events = nEvent, nColonies = 10, nPathogens = 2,   recovery = 1,  sample = sample, dispersal = 0.1, birth = 0.05, death = 0.05, crossImmunity = 0.1, meanColonySize = 3000, infectDeath = 0, transmission = 0.2, maxDistance = 100, colonySpatialDistr = 'circle')


invadeTitle <-
'
Examples of simulated SIR dynamics with succesfull invasions
'



invadeCapt <- 
'
Two examples (A and B) of a succesful invasion plotted on a logged $y$-axis.
The lines are coloured such that blue represents susceptibles, brown represents individuals infected with one pathogen (the two seperate brown lines are Pathogen 1 and 2), black represents co-infected individuals and yellow represents recovered and immune individuals.
Pathogen 2 is seeded after \\SI{300000} events (approximately 30 years).
Simulations are run on a fully-connected network.
Parameter values are: dispersal rate = 0.1, transmission rate = 0.2.
All other parameters are as stated in Table~\\ref{t:params}.
'


%%end.rcode


%%begin.rcode plotsInvade, fig.cap = invadeCapt, fig.scap = invadeTitle, fig.height = 5, out.width = "\\textwidth" 

load('data/Chapter2/Appen1.RData')
load('data/Chapter2/Appen24.RData')

maxt <- max(sum(p1$sampleWaiting), sum(p2$sampleWaiting))

findDisDistr(p1, 2)[1] > 0
invade1 <- pSIR(p1) + 
            theme_tcdl + 
            scale_y_log10() + 
            scale_colour_poke(pokemon = 'Loudred', spread = 4, 
              labels = c(expression(S), expression(I['i']), expression(I[12]), expression(R))) +
            guides(colour=guide_legend(title = '')) +
            theme(legend.text.align = 0) +
            xlab('Time (years)') +
            xlim(0, maxt) 


findDisDistr(p2, 2)[1] > 0
invade2 <- pSIR(p2) + 
            theme_tcdl + 
            scale_y_log10() + 
            scale_colour_poke(pokemon = 'Loudred', spread = 4, 
              labels = c(expression(S), expression(I['i']), expression(I[12]), expression(R))) +
            guides(colour=guide_legend(title = '')) +
            theme(legend.text.align = 0) +
            xlab('Time (years)') +
            xlim(0, maxt)


# Combine and print the plots.
ggdraw() +
  draw_label("A)", 0.02, 0.98, size = 10, fontface = 'plain', fontfamily = 'lato light') + 
  draw_plot(invade1, 0, 0, 1, 0.5) +
  draw_label("B)", 0.02, 0.48, size = 10, fontface = 'plain', fontfamily = 'lato light') + 
  draw_plot(invade2, 0, 0.5, 1, 0.5) 

%%end.rcode



% --------------------------------------------------------------------------- %
% No invasion plots
% --------------------------------------------------------------------------- %



%%begin.rcode noInvadeCapts

noInvadeTitle <- c(
'
Examples of simulated SIR dynamics with nusuccesfull invasions
',
'
Examples of colony size dynamics
'
)



noInvadeCapt <- c(
'
Two examples (A and B) of an unsuccesful invasion plotted on a logged $y$-axis.
The lines are coloured such that blue represents susceptibles, brown represents individuals infected with one pathogen (the two seperate brown lines are Pathogen 1 and 2), black represents co-infected individuals and yellow represents recovered and immune individuals.
Pathogen 2 is seeded after \\SI{300000} events (approximately 30 years).
It can be seen that after seeding Pathogen 2, there is a very short period before extinction as opposed to a long fade out of disease.
Simulations are run on a fully-connected network.
Parameter values are: dispersal rate = 0.1, transmission rate = 0.2.
All other parameters are as stated in Table~\\ref{t:params}.
',
'
Two examples (A and B) of the change in colony sizes throughout a simulation (note the truncated $y$-axis).
The size of each colony changes as a random walk.
However, given the length of the simulations, there is little risk of colonies going extinct or becoming very large.
Birth and death rate are equal and set to 0.05, giving a generation time of 20 years.
The metapopulation network is fully-connected and the dispersal rate is 0.1 per year.
The starting colony size is \\SI{3000}.
'
)

%%end.rcode



%%begin.rcode plotsNoInvade, fig.cap = noInvadeCapt, fig.scap = noInvadeTitle, fig.height = 5, out.width = c("\\textwidth", "0.8\\textwidth")

load('data/Chapter2/Appen22.RData')
p1 <- p2
load('data/Chapter2/Appen25.RData')

maxt <- max(sum(p1$sampleWaiting), sum(p2$sampleWaiting))

noInvade1 <- pSIR(p1) + 
               theme_tcdl + 
               scale_y_log10() + 
               scale_colour_poke(pokemon = 'Loudred', spread = 4, 
                 labels = c(expression(S), expression(I['i']), expression(I[12]), expression(R))) +
               guides(colour=guide_legend(title = '')) +
               theme(legend.text.align = 0) +
               xlab('Time (years)') +
               xlim(0, maxt)
pop1 <- pPop(p1) + theme_tcdl + xlab('Time (years)') + xlim(0, maxt)





noInvade2 <- pSIR(p2) + 
               theme_tcdl + 
               scale_y_log10() + 
               scale_colour_poke(pokemon = 'Loudred', spread = 4, 
                 labels = c(expression(S), expression(I['i']), expression(I[12]), expression(R))) +
               guides(colour=guide_legend(title = '')) +
               theme(legend.text.align = 0) +
               xlab('Time (years)') +
               xlim(0, maxt)
pop2 <- pPop(p2) + theme_tcdl + xlab('Time (years)') + xlim(0, maxt)


# Combine and print the plots.
ggdraw() +
  draw_label("A)", 0.02, 0.98, size = 10, fontface = 'plain', fontfamily = 'lato light') + 
  draw_plot(noInvade1, 0, 0, 1, 0.5) +
  draw_label("B)", 0.02, 0.48, size = 10, fontface = 'plain', fontfamily = 'lato light') + 
  draw_plot(noInvade2, 0, 0.5, 1, 0.5) 

  


# Combine and print the plots.
ggdraw() +
  draw_label("A)", 0.02, 0.98, size = 10, fontface = 'plain', fontfamily = 'lato light') + 
  draw_plot(pop1, 0, 0, 1, 0.5) +
  draw_label("B)", 0.02, 0.48, size = 10, fontface = 'plain', fontfamily = 'lato light') + 
  draw_plot(pop2, 0, 0.5, 1, 0.5) 

  
%%end.rcode








%%begin.rcode DispSimsFuncs

  #################################
  # Dispersal sim definitions     #
  #################################


  # How often should the population be sampled. Only sampled populations are saved.
  sample <- 1000

  # How many simulations to run?
  each <- 10
  nDispSims <- 12 * each


# Define our simulation function.
fullSim <- function(x){

  dispVec <- rep(c(0.001, 0.01, 0.1), each = nDispSims/3 +1)
  disp <- dispVec[x]

  tranVec <- rep(c(0.1, 0.2, 0.3, 0.4 ), nDispSims/3 + 1)
  tran <- tranVec[x]

  # Set seed (this is set within each parallel simulation to prevent reusing random numbers).
  simSeed <- paste0(seed, x)
  set.seed(simSeed)

  # Make the population.
  p <- makePop(model = 'SIR', events = nEvent, nColonies = 10, nPathogens = 2,   recovery = 1,  sample = sample, dispersal = disp, birth = 0.05, death = 0.05, crossImmunity = 0.1, meanColonySize = 3000, infectDeath = 0, transmission = tran, maxDistance = 100, colonySpatialDistr = 'circle')

  # Seed endemic pathogen.
  for(i in 1:10){
    p <- seedPathogen(p, 2, n = 200, diffCols = FALSE)
  }

  # Burn in simulation
  p <- runSim(p, end = invadeT)

  # Seed invading pathogen.
  p$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, (invadeT + 1) %% sample)

  # Continue simulation
  p <- runSim(p, start = invadeT + 1, end = 'end')

  # Was the invasion succesful?
  invasion <- findDisDistr(p, 2)[1] > 0

  # Save summary stats
  d <- data.frame(transmission = NA)

  d$transmission <- p$parameters['transmission']
  d$dispersal <- p$parameters['dispersal']
  d$nExtantDis <- sum(findDisDistr(p, 2) > 0)
  d$singleInf <- findCoinfDistr(p, 2)[2]
  d$doubleInf <- findCoinfDistr(p, 2)[3]
  d$nColonies <- p$parameters['nColonies']
  d$nPathogens <- p$parameters['nPathogens']
  d$meanK <- sum(p$adjacency != 0 )/p$parameters['nColonies']
  d$maxDistance <- p$parameters['maxDistance']
  d$nEvents <- p$parameters['events']


  # Time until extinction
  invadePath <- colSums(p$sample[2,  , (2 + invadeT / sample):(dim(p$sample)[3])]) + 
                  colSums(p$sample[4,  , (2 + invadeT / sample):(dim(p$sample)[3])])

  d$extinctionTime <- cumsum(p$sampleWaiting)[min(which(invadePath == 0)) + (2 + invadeT / sample)]
  d$totalTime <- sum(p$sampleWaiting)
  d$survivalTime <- d$extinctionTime - cumsum(p$sampleWaiting)[(2 + invadeT / sample)]

  message(paste0("finished ", x, ". Invasion: ", invasion ))
  
  if(saveData){ 
    file <- paste0('data/Chapter2/DispSims/DispSim_', formatC(x, width = 4, flag = '0'), '.RData')
    save(p, file = file)
  }

  rm(p)

  return(d)

}
%%end.rcode

%%begin.rcode runDispSim, eval = TRUE, cache = TRUE

# Create and set seed (seed object is used to set seed in each seperate simulation.'
seed <- 33355
set.seed(seed)

# If we want to save the data, make a directory for it.
if(saveData){
  dir.create('data/Chapter2/DispSims/')
}

# Run sims.
z <- mclapply(1:nDispSims, . %>% fullSim, mc.preschedule = FALSE, mc.cores = nCores)

z <- do.call(rbind, z)

# Save summary data.
write.csv(z, file = 'data/Chapter2/DispSimsTimes.csv')

%%end.rcode



% ------------------------------------------------------------------ %
% Topology Sims
% ------------------------------------------------------------------ %



%%begin.rcode TopoSimsFuncs

  #################################
  # Topology sim definitions      #
  #################################

  # How many simulations to run?
  nTopoSims <- 8 * each

# Define our simulation function.
fullSim <- function(x){


  # Chose maxdistance so that we get either fully connected or circle networks.
  mxDis <- rep(c(40, 200), each = nTopoSims/2 + 1)[x]

  # Chose transmission rates.
  tranVec <- rep(c(0.1, 0.2, 0.3, 0.4), nTopoSims/4 + 1)
  tran <- tranVec[x]


  # Set seed (this is set within each parallel simulation to prevent reusing random numbers).
  simSeed <- paste0(seed, x)
  set.seed(simSeed)

  # Make the population.
  p <- makePop(model = 'SIR', events = nEvent, nColonies = 10, nPathogens = 2,   recovery = 1,  sample = sample, dispersal = 0.01, birth = 0.05, death = 0.05, crossImmunity = 0.1, meanColonySize = 3000, infectDeath = 0, transmission = tran, maxDistance = mxDis, colonySpatialDistr = 'circle')

  # Seed endemic pathogen.
  for(i in 1:10){
    p <- seedPathogen(p, 2, n = 200, diffCols = FALSE)
  }

  # Burn in simulation
  p <- runSim(p, end = invadeT)

  # Seed invading pathogen.
  p$I[2, 1, (invadeT + 1) %% sample] <- 5
  
  # Recalculate rates of each event after seeding.
  p <- transRates(p, (invadeT + 1) %% sample)

  # Continue simulation
  p <- runSim(p, start = invadeT + 1, end = 'end')

  # Was the invasion succesful?
  invasion <- findDisDistr(p, 2)[1] > 0

  # Save summary stats
  d <- data.frame(transmission = NA)

  d$transmission <- p$parameters['transmission']
  d$dispersal <- p$parameters['dispersal']
  d$nExtantDis <- sum(findDisDistr(p, 2) > 0)
  d$singleInf <- findCoinfDistr(p, 2)[2]
  d$doubleInf <- findCoinfDistr(p, 2)[3]
  d$nColonies <- p$parameters['nColonies']
  d$nPathogens <- p$parameters['nPathogens']
  d$meanK <- sum(p$adjacency != 0 )/p$parameters['nColonies']
  d$maxDistance <- p$parameters['maxDistance']
  d$nEvents <- p$parameters['events']
  d$path2[x] <- sum(p$sample[c(2, 4), , dim(p$sample)[3]])

  # Time until extinction
  invadePath <- colSums(p$sample[2,  , (2 + invadeT / sample):(dim(p$sample)[3])]) + 
                  colSums(p$sample[4,  , (2 + invadeT / sample):(dim(p$sample)[3])])

  d$extinctionTime <- cumsum(p$sampleWaiting)[min(which(invadePath == 0)) + (2 + invadeT / sample)]
  d$totalTime <- sum(p$sampleWaiting)
  d$survivalTime <- d$extinctionTime - cumsum(p$sampleWaiting)[(2 + invadeT / sample)]


  message(paste0("finished ", x, ". Invasion: ", invasion ))
  
  if(saveData){ 
    file <- paste0('data/Chapter2/TopoSims/TopoSim_', formatC(x, width = 4, flag = '0'), '.RData')
    save(p, file = file)
  }

  rm(p)

  return(d)

}
%%end.rcode

%%begin.rcode runTopoSim, eval = TRUE, cache = TRUE

# Create and set seed (seed object is used to set seed in each seperate simulation.'
seed <- 1230202
set.seed(seed)

# If we want to save the data, make a directory for it.
if(saveData){
  dir.create('data/Chapter2/TopoSims/')
}

# Run sims.
z <- mclapply(1:nTopoSims, . %>% fullSim, mc.preschedule = FALSE, mc.cores = nCores)

z <- do.call(rbind, z)

# Save summary data.
write.csv(z, file = 'data/Chapter2/TopoSimsTimes.csv')

%%end.rcode





%%begin.rcode extinctionTimes

dispTimes <- read.csv('data/Chapter2/DispSimsTimes.csv', row.names = 1)

load('data/Chapter2/DispSims/DispSim_0018.RData')

path2 <- rep(NA, 120)
path2short <- rep(NA, 120)

for(x in seq_len(120)){
    file <- paste0('data/Chapter2/DispSims/DispSim_', formatC(x, width = 4, flag = '0'), '.RData')
    load(file)
    path2[x] <- sum(p$sample[c(2, 4), , dim(p$sample)[3]])
    path2short[x] <- sum(p$sample[c(2, 4), ,701])
}

invasion <- path2 == 0
invasionShort <- path2short == 0

changes <- sum(invasion == invasionShort) / length(invasion)


%%end.rcode





% ------------------------------------------------ %
% Raw data tables
% ------------------------------------------------ %



%%begin.rcode loadDispData

# Read in the data.
# Later I'll add in the option to simulate the whole dataset.
dDisp <- read.csv('data/Chapter2/DispSims.csv', stringsAsFactors = FALSE)
dim(dDisp)
head(dDisp)

extraMidBeta <- read.csv('data/Chapter2/extraMidBeta.csv', stringsAsFactors = FALSE)

noDisp <- read.csv('data/Chapter2/noDispSims.csv', stringsAsFactors = FALSE)
%%end.rcode





%%begin.rcode DispDataOrganise

dDisp <- rbind(dDisp, extraMidBeta[, 1:11], noDisp[, 1:11])


# Which simulations have an extinction

dDisp$invasion <- dDisp$nPathogens - dDisp$nExtantDis == 0



# Number of simulations of each treatment
nDisp <- dDisp %>% 
  group_by(transmission, dispersal) %>% 
  dplyr::select(invasion) %>%
  summarise(n())


# Number of extinctions by treatment
invsDisp <- dDisp %>% 
  group_by(transmission, dispersal) %>% 
  dplyr::select(invasion) %>%
  filter(invasion == TRUE) %>%
  summarise(n())

propsDisp <- left_join(nDisp, invsDisp, by = c('dispersal', 'transmission')) %>%
               select(1, 2, 4, 3)

names(propsDisp) <- c( '$\\beta$', 'Dispersal', 'Invasions', 'Sims')

propsDisp$Invasions[is.na(propsDisp$Invasions)] <- 0


             
%%end.rcode




%%begin.rcode loadTopoData

# Read in the data.
# Later I'll add in the option to simulate the whole dataset.
dTopo <- read.csv('data/Chapter2/TopoSims.csv', stringsAsFactors = FALSE)
dim(dTopo)
head(dTopo)

dTopo <- rbind(dTopo, noDisp[, 1:11])

%%end.rcode


%%begin.rcode TopoDataOrganise

# Which simulations have an extinction

dTopo$invasion <- dTopo$nPathogens - dTopo$nExtantDis == 0

# Number of extinctions by treatment
invsTopo <- dTopo %>% 
  group_by(transmission, meanK) %>% 
  dplyr::select(invasion) %>%
  filter(invasion == TRUE) %>%
  summarise(n()) %>%
  rbind(c(0.1, 1, 0), .)

# Number of simulations of each treatment
nTopo <- dTopo %>% 
  group_by(transmission, meanK) %>% 
  dplyr::select(invasion) %>%
  summarise(n())


propsTopo <- left_join(nTopo, invsTopo, by = c('meanK', 'transmission')) %>%
               mutate(Topology = c('Unconnected', 'Minimally', 'Fully')[factor(meanK)]) %>%
               select(1, 5, 4, 3)

names(propsTopo) <- c( '$\\beta$', 'Topology', 'Invasions', 'Sims')


%%end.rcode






















\clearpage
%%begin.rcode pop, results = 'asis'


dispTitle <- "
Raw data for dispersal simulations
  "

dispCapt <- "
Raw data for dispersal simulations.
The relevant parameters are shown along with the number of invasions and the number of simulations.
$\\beta$ is the transmission rate.
"


print(xtable(propsDisp,
             caption = c(dispCapt, dispTitle), 
             label = "B-disp",
             digits = c(0, 1, 3, 0, 0),
             align = c('r', '@{}r', 'r', 'r','r@{}')), 
      size = "small", #Change size; useful for bigger tables
      include.rownames = FALSE, #Don't print rownames
      include.colnames = TRUE,
      sanitize.colnames.function = function(x){x},
      caption.placement = "top",
      booktabs = TRUE
    )

%%end.rcode




%%begin.rcode topo, results = 'asis'


topoTitle <- "
Raw data for topology simulations
  "

topoCapt <- "
Raw data for topology simulations.
The relevant parameters are shown along with the number of invasions and the number of simulations.
$\\beta$ is the transmission rate.
"


print(xtable(propsTopo,
             caption = c(topoCapt, topoTitle), 
             label = "B-topo",
             digits = c(0, 1, 1, 0, 0),
             align = c('r', '@{}r', 'l', 'l','r@{}')), 
      size = "small", #Change size; useful for bigger tables
      include.rownames = FALSE, #Don't print rownames
      include.colnames = TRUE,
      sanitize.colnames.function = function(x){x},
      caption.placement = "top",
      booktabs = TRUE
    )

%%end.rcode





